<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/yu-rpc-easy/src/main/java/com/yupi/yurpc/server/tcp/TcpBufferHandlerWrapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/yu-rpc-easy/src/main/java/com/yupi/yurpc/server/tcp/TcpBufferHandlerWrapper.java" />
              <option name="originalContent" value="package com.yupi.yurpc.server.tcp;&#10;&#10;import com.yupi.yurpc.protocol.ProtocolConstant;&#10;import io.vertx.core.Handler;&#10;import io.vertx.core.buffer.Buffer;&#10;import io.vertx.core.parsetools.RecordParser;&#10;&#10;public class TcpBufferHandlerWrapper implements Handler&lt;Buffer&gt; {&#10;    &#10;    private final RecordParser recordParser;&#10;    &#10;    public TcpBufferHandlerWrapper(Handler &lt;Buffer&gt; bufferHandler) {&#10;        recordParser=initRecordParser(bufferHandler);&#10;    }&#10;    &#10;    @Override&#10;    public void handle(Buffer buffer) {&#10;        recordParser.handle(buffer);&#10;    }&#10;    &#10;    private RecordParser initRecordParser(Handler &lt;Buffer&gt; bufferHandler) {&#10;       //构造 parser&#10;        RecordParser parser=RecordParser.newFixed(ProtocolConstant.MESSAGE_HEADER_LENGTH);&#10;        &#10;        parser.setOutput(new Handler&lt;Buffer&gt;() {&#10;            int size=-1;&#10;            Buffer resultBuffer=Buffer.buffer();&#10;            @Override&#10;            public void handle(Buffer buffer) {&#10;                if(-1==size){&#10;                    //读取消息长度&#10;                    size=buffer.getInt(4);&#10;                    parser.fixedSizeMode(size);&#10;                    //写入头信息到结果&#10;                    resultBuffer.appendBuffer(buffer);&#10;                }else{&#10;                    //写入体信息到结果&#10;                    resultBuffer.appendBuffer(buffer);&#10;                    //打印结果&#10;                    System.out.println(&quot;收到消息：&quot;+resultBuffer.toString());&#10;                    //重置状态&#10;                    parser.fixedSizeMode(ProtocolConstant.MESSAGE_HEADER_LENGTH);&#10;                    size=-1;&#10;                    resultBuffer=Buffer.buffer();&#10;                }&#10;            }&#10;        });&#10;        return parser;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.yupi.yurpc.server.tcp;&#10;&#10;import com.yupi.yurpc.protocol.ProtocolConstant;&#10;import io.vertx.core.Handler;&#10;import io.vertx.core.buffer.Buffer;&#10;import io.vertx.core.parsetools.RecordParser;&#10;&#10;public class TcpBufferHandlerWrapper implements Handler&lt;Buffer&gt; {&#10;    &#10;    private final RecordParser recordParser;&#10;    &#10;    public TcpBufferHandlerWrapper(Handler &lt;Buffer&gt; bufferHandler) {&#10;        recordParser=initRecordParser(bufferHandler);&#10;    }&#10;    &#10;    @Override&#10;    public void handle(Buffer buffer) {&#10;        recordParser.handle(buffer);&#10;    }&#10;    &#10;    private RecordParser initRecordParser(Handler &lt;Buffer&gt; bufferHandler) {&#10;       //构造 parser&#10;        RecordParser parser=RecordParser.newFixed(ProtocolConstant.MESSAGE_HEADER_LENGTH);&#10;        &#10;        parser.setOutput(new Handler&lt;Buffer&gt;() {&#10;            int size=-1;&#10;            Buffer resultBuffer=Buffer.buffer();&#10;            @Override&#10;            public void handle(Buffer buffer) {&#10;                if(-1==size){&#10;                    //读取消息长度&#10;                    size=buffer.getInt(4);&#10;                    parser.fixedSizeMode(size);&#10;                    //写入头信息到结果&#10;                    resultBuffer.appendBuffer(buffer);&#10;                }else{&#10;                    //写入体信息到结果&#10;                    resultBuffer.appendBuffer(buffer);&#10;                    //打印结果&#10;                    System.out.println(&quot;收到消息：&quot;+resultBuffer.toString());&#10;                    //重置状态&#10;                    parser.fixedSizeMode(ProtocolConstant.MESSAGE_HEADER_LENGTH);&#10;                    size=-1;&#10;                    resultBuffer=Buffer.buffer();&#10;                }&#10;            }&#10;        });&#10;        return parser;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>